
// DEF_CMD_ (num, name, args, code)

// TODO make numbers more clear ?

DEF_CMD_ (1, PUSH, 1, {PUSH (ARG);})

DEF_CMD_ (2, IN, 0, {PUSH (input_int ());})

DEF_CMD_ (3, MUL, 0, {PUSH (POP * POP);})

DEF_CMD_ (4, OUT, 0, {printf ("OUT: %d\n", POP);})

DEF_CMD_ (5, ADD, 0, {PUSH (POP + POP);})

DEF_CMD_ (6, POP, 1, {ARG = POP;})

DEF_CMD_ (7, JMP, 1, {JUMP (ARG);})

// equal
DEF_CMD_ (8, JE, 1, {if (POP == POP) JUMP (ARG);})

// deeper is greater than higher
DEF_CMD_ (9, JA, 1, {
    int a_ = POP; int b_ = POP; 
    if (a_ < b_) 
        JUMP (ARG);
})

// higher is greater than deeper
DEF_CMD_ (10, JB, 1, {
    int a_ = POP; int b_ = POP; 
    if (a_ > b_) 
        JUMP (ARG);
})

DEF_CMD_ (11, SQRT, 0, {
    int x_ = POP;
    if (x_ < 0) 
        printf ("ERROR: Calculating sqaure root from negative value, pushing nothing\n");
    else
        PUSH (sqrt (x_) + 0.5);
})

// deeper / higher
DEF_CMD_ (12, DIV, 0, {
    int a_ = POP; int b_ = POP; 
    if (a_ == 0)
        printf ("ERROR: division by zero, pushing nothing\n");
    PUSH (b_ / a_);
})

DEF_CMD_ (13, RET, 0, {JUMP (POP);})

DEF_CMD_ (14, CALL, 1, {
    PUSH (cpu->ip + SIZE_ARG); 
    JUMP (ARG);
})

DEF_CMD_ (15, PRINT, 0, {
    char buffer_[PIXEL_X * PIXEL_Y + 1000] = {};
    int cnt_ = 0;

    for (int y_ = 0; y_ < PIXEL_Y; y_++) {
        for (int x_ = 0; x_ < PIXEL_X; x_++)
            buffer_[cnt_++] = cpu->ram[VID_RAM + y_ * PIXEL_X + x_] ? '*' : ' ';
        buffer_[cnt_++] = '\n';
    }

    buffer_[cnt_] = '\0'; // TODO why cnt_-1?
    fputs (buffer_, stdout);
    Sleep (PRINT_DELAY);
})

// deeper % higher
DEF_CMD_ (16, MOD, 0, {
    int a_ = POP; int b_ = POP; 
    PUSH (b_ % a_);
})

DEF_CMD_ (17, JNE, 1, {if (POP != POP) JUMP (ARG);})

DEF_CMD_ (18, MEMSET, 1, {
    int right_ = POP;
    int left_ = POP;
    int val_ = ARG;
    
    if (left_ < 0 || right_ <= left_) {
        printf ("Wrong args %d and %d of MEMSET at pos %d\n", left_, right_, cpu->ip);
        break;
    }

    DEB ("MEMSET from %d to %d with val %d at pos %d\n", left_, right_, val_, cpu->regs['p'-'a']);

    for (int i = left_; i < right_; i++) 
        cpu->ram[i] = val_;
})

DEF_CMD_ (19, DUMP, 1, {cpu_dump (stdout, cpu, ARG);})

DEF_CMD_ (20, MEOW, 0, {printf ("Meow!\n");})

DEF_CMD_ (21, DATAINT, 1, {PUSH (*(int*) (cpu->bin + ARG));})

DEF_CMD_ (22, DATACHAR, 1, {PUSH (cpu->bin[ARG]);})

DEF_CMD_ (23, SUB, 0, {
    int a_ = POP; int b_ = POP; 
    PUSH (b_ - a_);
})

DEF_CMD_ (24, POW, 0, {
    int a_ = POP; int b_ = POP; 
    PUSH ( pow (b_, a_));
})

