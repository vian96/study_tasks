
// DEF_CMD_ (num, name, args, code)

// TODO make numbers more clear

DEF_CMD_ (1, PUSH, 1, {PUSH (ARG);})

DEF_CMD_ (2, IN, 0, {PUSH (input_int ());})

DEF_CMD_ (3, MUL, 0, {PUSH (POP * POP);})

DEF_CMD_ (4, OUT, 0, {printf ("OUT: %d\n", POP);})

DEF_CMD_ (5, ADD, 0, {PUSH (POP + POP);})

DEF_CMD_ (6, POP, 1, {ARG = POP;})

DEF_CMD_ (7, JMP, 1, {JUMP (ARG);})

// equal
DEF_CMD_ (8, JE, 1, {if (POP == POP) JUMP (ARG);})

// deeper is greater than higher
DEF_CMD_ (9, JA, 1, {
    int a_ = POP; int b_ = POP; 
    if (a_ < b_) 
        JUMP (ARG);
})

// higher is greater than deeper
DEF_CMD_ (10, JB, 1, {
    int a_ = POP; int b_ = POP; 
    if (a_ > b_) 
        JUMP (ARG);
})

DEF_CMD_ (11, SQRT, 0, {PUSH (sqrt (POP));})

// deeper / higher
DEF_CMD_ (12, DIV, 0, {
    int a_ = POP; int b_ = POP; 
    PUSH (b_ / a_);
})

DEF_CMD_ (13, RET, 0, {JUMP (POP);})

DEF_CMD_ (14, CALL, 1, {
    PUSH (cpu.ip + ARG_SIZE); 
    JUMP (ARG);
})

