// generator for f_out of my processor to show bad apple

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

const int BUF_SIZE = 3030; // len of frame plus cnt of \n (they're ignored)
const int FRAME_LEN = 3000;
const int BEGIN_VID = 2000;
const int NUM_FRAMES = 2181;

#define PUT_ASM(ind, row, val)                                  \
    if (val != -1)                                              \
        if (row > 1)                                            \
            fprintf (                                           \
                f_out, "push %d\npush %d\nmemset %d\n",         \
                BEGIN_VID + ind - row, BEGIN_VID + ind, val     \
            );                                                  \
        else                                                    \
            fprintf (                                           \
                f_out, "push %d\npop [%d]\n",                   \
                val, BEGIN_VID + ind - 1                        \
            );
// end of PUT_ASM define

int main () {
    // this file was taken from https://github.com/Chion82/ASCII_bad_apple with small changes
    FILE *f_in = fopen ("badapple.txt", "r");
    FILE *f_out = fopen ("badapple.casm", "w");

    fprintf (f_out, "; This file is automatically generated to play bad apple on my cpu\n");

    char *buffer = (char*) calloc (FRAME_LEN + 1, sizeof (char));
    char *prev = (char*) calloc (FRAME_LEN + 1, sizeof (char));
    char *diff = (char*) calloc (FRAME_LEN + 1, sizeof (char));

    for (int frame = 0; frame < NUM_FRAMES; frame++) {
        fread (buffer, 1, BUF_SIZE, f_in);

        int cnt = 0;
        for (int i = 0; i < BUF_SIZE; i++) {
            if (buffer[i] == '\n')
                continue;

            if (buffer[i] != ' ') 
                buffer[cnt++] = 1;
            else 
                buffer[cnt++] = 0;
        }

        for (int i = 0; i < FRAME_LEN; i++)
            diff[i] = buffer[i] - prev[i];

        int row = 0;
        int last = -1;

        for (int i = 0; i < FRAME_LEN; i++) {
            if (diff[i]) {
                if (buffer[i] == last) {
                    row++;
                }
                else {
                    PUT_ASM (i, row, last);
                    last = buffer[i];
                    row = 1;
                }
            }
            else {
                // only one condition is needed, this is for debug
                PUT_ASM (i, row, last);
                if (row && last != -1) {
                    last = -1;
                    row = 0;
                }
            }
        }
        
        PUT_ASM (FRAME_LEN, row, last);

        // swap
        prev = (char*) ((size_t) prev ^ (size_t) buffer);
        buffer = (char*) ((size_t) prev ^ (size_t) buffer);
        prev = (char*) ((size_t) buffer ^ (size_t) prev);

        fprintf (f_out, "print\n\n\n");
    }

    free (buffer);
    free (prev);

    fclose (f_in);
    fclose (f_out);
}
